---
# tasks file for ah-install
- name: Retrieve an access token
# offline_token to be retreived from https://access.redhat.com/management/api
  ansible.builtin.uri:
    url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
    body:
      grant_type: refresh_token
      client_id: rhsm-api
      refresh_token: "{{ offline_token }}"
    body_format: form-urlencoded
    method: POST
  register: response

- name: Workaround to non-working uri module on success
  ansible.builtin.shell: 'curl -H "Authorization: Bearer {{ response.json.access_token }}" https://api.access.redhat.com/management/v1/images/{{ checksum_aap2 }}/download'
  register: imageurl

- name: Set result as facts
  ansible.builtin.set_fact:
    installer_url: "{{ (imageurl.stdout | from_json).body.href }}"
    installer_package: "{{(imageurl.stdout | from_json).body.filename }}"

- name: Retrieve Installer
  ansible.builtin.get_url:
    url: "{{ installer_url }}"
    dest: "/tmp/{{ installer_package }}"

- name: Enable required RHSM repositories
  community.general.rhsm_repository:
    name: 
      - ansible-automation-platform-{{ aap_version }}-for-rhel-8-x86_64-rpms
    state: enabled
  become: true

- name: Ensure all packages are updated
  ansible.builtin.yum:
    name: '*'
    state: latest
  become: true

- name: Create destination directory
  ansible.builtin.file:
    path: ~/aap2
    state: directory

- name: Extract AAP2 setup content
  ansible.builtin.unarchive:
    #src: "/tmp/{{ controller_ah_instance_name['installer_package'] }}"
    src: /tmp/{{ hostvars[inventory_hostname]['installer_package'] }}"
    dest: ~/aap2
    remote_src: yes

- name: Retrieve aap2 folder name
  ansible.builtin.find:
    paths: ~/aap2
    file_type: directory
  register: untar

- name: Print var
  ansible.builtin.debug:
    var: untar.files[0].path

- name: Copy inventory for controller
  ansible.builtin.copy:
    dest: "{{ untar.files[0].path }}/inventory"
    src: inventory-hub.j2
  become: true

- name: Install Automation Hub
  ansible.builtin.shell:
    cmd: ./setup.sh
    chdir: "{{ untar.files[0].path }}"
  become: true        

- name: Reboot server
  ansible.builtin.reboot:
  become: true