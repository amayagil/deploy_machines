---
  - name: Get my list of CVEs
    ansible.builtin.uri:
      url: "{{ insights_api_url }}/vulnerability/v1/systems/{{ insights_inventory_id }}/cves?limit=30"
      method: GET
      user: "{{ insights_auth_user }}"
      password: "{{ insights_auth_password }}"
      validate_certs: no
      force_basic_auth: yes
      status_code: 200
      return_content: yes 
      headers:
        Content-Type: "application/json"
    register: cve_list
    until: "cve_list.status == 200"
    ignore_errors: true
    retries: 40
    delay: 10

  - name: Set result json as fact
    ansible.builtin.set_fact:
      cve_list_data_json: "{{ (cve_list.content | from_json).data }}"

  - name: Print out cve_list_data_json
    ansible.builtin.debug:
      msg: "{{ cve_list_data_json }}"

  - name: Create a list for each cve with a playbook
    ansible.builtin.set_fact:
      cves_with_pb: "{{ cves_with_pb + [{ 'id' : item.id, 
                                          'insights_id' : insights_inventory_id,
                                          'hostname' : dns_name,
                                          'impact' : item.attributes.impact }] }}"
    loop: "{{ cve_list_data_json }}"
    when: item.attributes.remediation == 2

  - name: print out cves_with_pb
    ansible.builtin.debug:
      msg: "{{ cves_with_pb }}"

#  - name: Create a Change Task tickets list
#    loop: "{{ task_numbers_are_here['results'] }}"
#    when: item.changed != false
#    ansible.builtin.set_fact:        
#      chg_tkt_list: "{{chg_tkt_list|default([]) + [{ 'number' : item.record.number, 
#                                                    'short_description' : item.record.short_description, 
#                                                    'task_sys_id' : item.record.sys_id,
#                                                    'change_request_sys_id' : item.record.change_request,
#                                                    'cmdb_ci' : item.record.cmdb_ci,
#                                                    'insights_id' : insights_inventory_id,
#                                                    'cve_id' : item.record.user_input }] }}"

#  - name: print out Change Task Tickets list
#    ansible.builtin.debug:
#      msg: "{{ chg_tkt_list }}"

#  - name: Generate playbooks to remediate vulnerabilities
#    register: my_playbooks
#    loop: "{{ chg_tkt_list }}"
#    ansible.builtin.uri:
#      url: "https://cloud.redhat.com/api/remediations/v1/playbook"
#      method: POST
#      user: "{{ insights_auth_user }}"
#      password: "{{ insights_auth_password }}"
#      validate_certs: no
#      force_basic_auth: yes
#      status_code: 200
#      return_content: yes 
#      headers:
#        Content-Type: "application/json"
#        accept: "text/vnd.yaml"
#        Connection: "keep-alive"
#      body_format: json
#      body: "{{ lookup('ansible.builtin.template','templates/playbook_generator_body.j2') }}"

  # - name: print my_playbooks stadard out
  #   loop: "{{ my_playbooks['results'] }}"
  #   ansible.builtin.debug:
  #     msg: "{{item.item.number}} {{ item.content.split('\n') }}"

#  - name: Write the playbooks to the change task for this cve
#    loop: "{{ my_playbooks['results'] }}"
#    servicenow.itsm.change_request_task:
#      on_hold: false
#      state: "in_progress"
#      number: "{{ item.item.number }}"
#      other:
#        work_notes: "{{ item.content }}"

  # - name: Make my_change_task_number_list available to future job change_request_number
  #   ansible.builtin.set_stats:
  #     data:
#  #       change_task_numbers: "{{ my_playbooks }}"
#
#  - name: Clone the software repository
#    delegate_to: 127.0.0.1
#    register: clone_result
#    run_once: true
#    when: software_repository is defined
#    ansible.builtin.git:
#      repo: "{{ software_repository }}"
#      dest: "{{ local_repo }}"
#      accept_hostkey: yes
#      force: yes
#
#  - name: Write the playbooks to the local_repo
#    loop: "{{ my_playbooks['results'] }}"
#    ansible.builtin.copy:
#      dest: "{{ local_repo }}/{{ item.item.number }}.yml"
#      content: "{{ item.content }}"
#
#  - name: Update playbooks to use the public facing dns name
#    loop: "{{ my_playbooks['results'] }}"
#    ansible.builtin.replace:
#      path: "{{ local_repo }}/{{ item.item.number }}.yml"
#      regexp: "{{ my_private_dns_name }}"
#      replace: "{{ my_server }}"
#
#  - name: Add any new playbooks to the software_repository
#    delegate_to: localhost
#    changed_when: False
#    run_once: true
#    args:
#      chdir: "{{ local_repo }}"
#    ansible.builtin.shell: "git add *"
#      
#  - name: Get the status of the repository
#    register: status_results
#    changed_when: False
#    ignore_errors: yes
#    delegate_to: localhost
#    run_once: true
#    args:
#      chdir: "{{ local_repo }}"
#    ansible.builtin.shell: "git status"
#
#  - name: Commit the changes
#    when: status_results.stdout is search('Changes')
#    delegate_to: localhost
#    run_once: true
#    environment:
#      GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
#      GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
#      GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
#      GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
#    args:
#      chdir: "{{ local_repo }}"
#    ansible.builtin.shell: "git commit -am 'Changed'"
#    
#  - name: Push the changes
#    delegate_to: localhost
#    run_once: true
#    when: software_repository is defined
#    args:
#      chdir: "{{ local_repo }}"
#    ansible.builtin.shell: "git push"
#
#  - name: Get an AAP API Token and store it as new_token
#    register: new_token
#    ansible.builtin.uri:
#      url: "https://{{ controller_url }}/api/v2/tokens/"
#      method: POST
#      user: "{{ username }}"
#      password: "{{ password }}"
#      validate_certs: no
#      force_basic_auth: yes
#      status_code: 201
#      return_content: yes       
#      
#    # - name: Print out the new token
#    #   ansible.builtin.debug: 
#    #     msg: "{{ new_token.json.token }}"
#
#  - name: Kick off a project sync
#    ansible.builtin.uri:
#      url: "https://{{ controller_url }}/api/v2/projects/{{ project_id }}/update/"
#      headers:
#        Authorization: "Bearer {{ new_token.json.token }}"
#        Content-Type: "application/json"
#      validate_certs: no
#      follow_redirects: all
#      return_content: no
#      method: "POST"
#      status_code: 202
#
#  - name: Pausing for 20 seconds to allow for the project sync up to finish
#    ansible.builtin.pause:
#      seconds: 20
#
#  - name: process my playbooks
#    loop: "{{ chg_tkt_list }}"
#    ansible.builtin.include_tasks:
#      file: tasks/launch_playbooks.yml