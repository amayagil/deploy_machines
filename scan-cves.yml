---
- name: Prepare machines for use with Red Hat
  hosts: localhost
  gather_facts: true

  vars:
    insights_auth_user: "{{ rhsm_username }}"
    insights_auth_password: "{{ rhsm_password  }}"
    insights_api_url: "https://console.redhat.com/api"
    cves: []
    cves_with_pb: []
  
  tasks:
  - name: Get the data of registered host
    register: host_list
    ignore_errors: true
    ansible.builtin.uri:
      #url: "{{ insights_api_url }}/inventory/v1/hosts"
      url: "{{ insights_api_url }}/inventory/v1/hosts?display_name={{ dns_name }}"
      method: GET
      user: "{{ insights_auth_user }}"
      password: "{{ insights_auth_password }}"
      validate_certs: no
      force_basic_auth: yes
      status_code: 200
      return_content: yes 
      headers:
        Content-Type: "application/json"

  - name: Print out all insights_ids
    ansible.builtin.debug:
      msg: "{{ host_list.json.results[0].id }}"
      
  - name: Capture Red Hat Insights inventory id for use on a workflow
    ansible.builtin.set_stats:
      data:
        insights_inventory_id_wf: "{{ host_list.json.results[0].id }}"

  - name: Capture Red Hat Insights inventory id for use on a playbook    
    ansible.builtin.set_fact:
      insights_inventory_id: "{{ host_list.json.results[0].id }}"

  - name: Get my list of CVEs
    ansible.builtin.uri:
      url: "{{ insights_api_url }}/vulnerability/v1/systems/{{ insights_inventory_id }}/cves?limit=30"
      method: GET
      user: "{{ insights_auth_user }}"
      password: "{{ insights_auth_password }}"
      validate_certs: no
      force_basic_auth: yes
      status_code: 200
      return_content: yes 
      headers:
        Content-Type: "application/json"
    register: cve_list
    until: "cve_list.status == 200"
    ignore_errors: true
    retries: 40
    delay: 10

  - name: Set result json as fact
    ansible.builtin.set_fact:
      cve_list_data_json: "{{ (cve_list.content | from_json).data }}"

#  - name: Print out cve_list_data_json
#    ansible.builtin.debug:
#      msg: "{{ cve_list_data_json }}"

  - name: Create a list for each cve with a playbook
    ansible.builtin.set_fact:
      cves_with_pb: "{{ cves_with_pb + [{ 'cve_id' : item.id, 
                                          'insights_id' : insights_inventory_id,
                                          'hostname' : dns_name,
                                          'impact' : item.attributes.impact }] }}"
    loop: "{{ cve_list_data_json }}"
    when: item.attributes.remediation == 2

  - name: Generate playbooks to remediate vulnerabilities
    ansible.builtin.uri:
      url: "{{ insights_api_url }}/remediations/v1/playbook"
      method: POST
      user: "{{ insights_auth_user }}"
      password: "{{ insights_auth_password }}"
      validate_certs: no
      force_basic_auth: yes
      status_code: 200
      return_content: yes 
      headers:
        Content-Type: "application/json"
        accept: "text/vnd.yaml"
        Connection: "keep-alive"
      body_format: json
      #body: "{{ lookup('ansible.builtin.template','templates/pb_generator_body.j2') }}"
      body:
          issues:
            - "id": "vulnerabilities:CVE-2018-3620"
              "systems": [
                "210f4107-03e5-4381-80a4-2b93890ee003"
              ]
    register: pbs_per_host
    #loop: "{{ cves_with_pb }}"

#  - name: print out cves_with_pb
#    ansible.builtin.debug:
#      msg: "{{ item.content }}"
#    loop: "{{ pbs_per_host.results }}"

  - name: Capture Red Hat Insights inventory id for use on a workflow
    ansible.builtin.set_stats:
      data:
        pbs_per_host_wf: "{{ pbs_per_host }}"

  - name: Insights | Create playbooks locally
    ansible.builtin.copy:
      #dest: "{{ playbook_dir }}/{{ item.item.cve_id }}-remediation-{{ item.item.hostname }}.yml"
      #content: "{{ item.content }}"
      dest: "{{ playbook_dir }}/{{ dns_name }}-CVEs.yml"
      content: "{{ pbs_per_host.content }}"
      mode: "0755"
    #loop: "{{ pbs_per_host.results }}"

- name: Run CVE remediation playbook
  hosts: "{{ dns_name }}"
  gather_facts: true

  tasks:
  
  - name: Run CVE remediation playbooks on "{{ dns_name }}"
    ansible.builtin.shell:
      cmd: ansible-playbook "{{ playbook_dir }}/{{ dns_name }}-CVEs.yml"
      #cmd: ansible-playbook "{{ playbook_dir }}/{{ item.item.cve_id }}-remediation-{{ item.item.hostname }}.yml"
    loop: "{{ pbs_per_host.results }}"
    
#  ansible.builtin.import_playbook: "{{ playbook_dir }}/{{ dns_name }}-CVEs.yml"
#  ignore_errors: true
#  loop: "{{ pbs_per_host_wf.results }}"